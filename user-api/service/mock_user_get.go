// Code generated by MockGen. DO NOT EDIT.
// Source: user_get.go

// Package service is a generated GoMock package.
package service

import (
	domain "BE-JoanaVidon/user-api/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGetUseCase is a mock of GetUseCase interface.
type MockGetUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetUseCaseMockRecorder
}

// MockGetUseCaseMockRecorder is the mock recorder for MockGetUseCase.
type MockGetUseCaseMockRecorder struct {
	mock *MockGetUseCase
}

// NewMockGetUseCase creates a new mock instance.
func NewMockGetUseCase(ctrl *gomock.Controller) *MockGetUseCase {
	mock := &MockGetUseCase{ctrl: ctrl}
	mock.recorder = &MockGetUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetUseCase) EXPECT() *MockGetUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetUseCase) Execute(arg0 string, arg1 domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetUseCaseMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetUseCase)(nil).Execute), arg0, arg1)
}

// MockGetRepository is a mock of GetRepository interface.
type MockGetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetRepositoryMockRecorder
}

// MockGetRepositoryMockRecorder is the mock recorder for MockGetRepository.
type MockGetRepositoryMockRecorder struct {
	mock *MockGetRepository
}

// NewMockGetRepository creates a new mock instance.
func NewMockGetRepository(ctrl *gomock.Controller) *MockGetRepository {
	mock := &MockGetRepository{ctrl: ctrl}
	mock.recorder = &MockGetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetRepository) EXPECT() *MockGetRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGetRepository) Get(arg0 string, arg1 domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGetRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetRepository)(nil).Get), arg0, arg1)
}
