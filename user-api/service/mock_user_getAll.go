// Code generated by MockGen. DO NOT EDIT.
// Source: user_getAll.go

// Package service is a generated GoMock package.
package service

import (
	domain "BE-JoanaVidon/user-api/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGetAllUseCase is a mock of GetAllUseCase interface.
type MockGetAllUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllUseCaseMockRecorder
}

// MockGetAllUseCaseMockRecorder is the mock recorder for MockGetAllUseCase.
type MockGetAllUseCaseMockRecorder struct {
	mock *MockGetAllUseCase
}

// NewMockGetAllUseCase creates a new mock instance.
func NewMockGetAllUseCase(ctrl *gomock.Controller) *MockGetAllUseCase {
	mock := &MockGetAllUseCase{ctrl: ctrl}
	mock.recorder = &MockGetAllUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAllUseCase) EXPECT() *MockGetAllUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetAllUseCase) Execute(arg0 []domain.User) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetAllUseCaseMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetAllUseCase)(nil).Execute), arg0)
}

// MockGetAllRepository is a mock of GetAllRepository interface.
type MockGetAllRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllRepositoryMockRecorder
}

// MockGetAllRepositoryMockRecorder is the mock recorder for MockGetAllRepository.
type MockGetAllRepositoryMockRecorder struct {
	mock *MockGetAllRepository
}

// NewMockGetAllRepository creates a new mock instance.
func NewMockGetAllRepository(ctrl *gomock.Controller) *MockGetAllRepository {
	mock := &MockGetAllRepository{ctrl: ctrl}
	mock.recorder = &MockGetAllRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAllRepository) EXPECT() *MockGetAllRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockGetAllRepository) GetAll(arg0 []domain.User) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGetAllRepositoryMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGetAllRepository)(nil).GetAll), arg0)
}
