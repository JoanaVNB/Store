// Code generated by MockGen. DO NOT EDIT.
// Source: user_create.go

// Package service is a generated GoMock package.
package service

import (
	domain "BE-JoanaVidon/user-api/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCreateUseCase is a mock of CreateUseCase interface.
type MockCreateUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateUseCaseMockRecorder
}

// MockCreateUseCaseMockRecorder is the mock recorder for MockCreateUseCase.
type MockCreateUseCaseMockRecorder struct {
	mock *MockCreateUseCase
}

// NewMockCreateUseCase creates a new mock instance.
func NewMockCreateUseCase(ctrl *gomock.Controller) *MockCreateUseCase {
	mock := &MockCreateUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateUseCase) EXPECT() *MockCreateUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCreateUseCase) Execute(arg0 domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCreateUseCaseMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateUseCase)(nil).Execute), arg0)
}

// MockCreateRepository is a mock of CreateRepository interface.
type MockCreateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreateRepositoryMockRecorder
}

// MockCreateRepositoryMockRecorder is the mock recorder for MockCreateRepository.
type MockCreateRepositoryMockRecorder struct {
	mock *MockCreateRepository
}

// NewMockCreateRepository creates a new mock instance.
func NewMockCreateRepository(ctrl *gomock.Controller) *MockCreateRepository {
	mock := &MockCreateRepository{ctrl: ctrl}
	mock.recorder = &MockCreateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateRepository) EXPECT() *MockCreateRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreateRepository) Create(arg0 domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCreateRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreateRepository)(nil).Create), arg0)
}
