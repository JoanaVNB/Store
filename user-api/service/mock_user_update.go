// Code generated by MockGen. DO NOT EDIT.
// Source: user_update.go

// Package service is a generated GoMock package.
package service

import (
	domain "BE-JoanaVidon/user-api/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdateUseCase is a mock of UpdateUseCase interface.
type MockUpdateUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateUseCaseMockRecorder
}

// MockUpdateUseCaseMockRecorder is the mock recorder for MockUpdateUseCase.
type MockUpdateUseCaseMockRecorder struct {
	mock *MockUpdateUseCase
}

// NewMockUpdateUseCase creates a new mock instance.
func NewMockUpdateUseCase(ctrl *gomock.Controller) *MockUpdateUseCase {
	mock := &MockUpdateUseCase{ctrl: ctrl}
	mock.recorder = &MockUpdateUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateUseCase) EXPECT() *MockUpdateUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUpdateUseCase) Execute(arg0, arg1 string, arg2 domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockUpdateUseCaseMockRecorder) Execute(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateUseCase)(nil).Execute), arg0, arg1, arg2)
}

// MockUpdateRepository is a mock of UpdateRepository interface.
type MockUpdateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateRepositoryMockRecorder
}

// MockUpdateRepositoryMockRecorder is the mock recorder for MockUpdateRepository.
type MockUpdateRepositoryMockRecorder struct {
	mock *MockUpdateRepository
}

// NewMockUpdateRepository creates a new mock instance.
func NewMockUpdateRepository(ctrl *gomock.Controller) *MockUpdateRepository {
	mock := &MockUpdateRepository{ctrl: ctrl}
	mock.recorder = &MockUpdateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateRepository) EXPECT() *MockUpdateRepositoryMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockUpdateRepository) Update(arg0, arg1 string, arg2 domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUpdateRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdateRepository)(nil).Update), arg0, arg1, arg2)
}
