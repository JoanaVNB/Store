// Code generated by MockGen. DO NOT EDIT.
// Source: user_update.go

// Package handlers is a generated GoMock package.
package handlers

import (
	domain "BE-JoanaVidon/user-api/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdateHandler is a mock of UpdateHandler interface.
type MockUpdateHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateHandlerMockRecorder
}

// MockUpdateHandlerMockRecorder is the mock recorder for MockUpdateHandler.
type MockUpdateHandlerMockRecorder struct {
	mock *MockUpdateHandler
}

// NewMockUpdateHandler creates a new mock instance.
func NewMockUpdateHandler(ctrl *gomock.Controller) *MockUpdateHandler {
	mock := &MockUpdateHandler{ctrl: ctrl}
	mock.recorder = &MockUpdateHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateHandler) EXPECT() *MockUpdateHandlerMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUpdateHandler) Execute(arg0, arg1 string, arg2 domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockUpdateHandlerMockRecorder) Execute(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateHandler)(nil).Execute), arg0, arg1, arg2)
}
