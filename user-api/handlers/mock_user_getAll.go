// Code generated by MockGen. DO NOT EDIT.
// Source: user_getAll.go

// Package handlers is a generated GoMock package.
package handlers

import (
	domain "BE-JoanaVidon/user-api/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGetAllHandler is a mock of GetAllHandler interface.
type MockGetAllHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllHandlerMockRecorder
}

// MockGetAllHandlerMockRecorder is the mock recorder for MockGetAllHandler.
type MockGetAllHandlerMockRecorder struct {
	mock *MockGetAllHandler
}

// NewMockGetAllHandler creates a new mock instance.
func NewMockGetAllHandler(ctrl *gomock.Controller) *MockGetAllHandler {
	mock := &MockGetAllHandler{ctrl: ctrl}
	mock.recorder = &MockGetAllHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAllHandler) EXPECT() *MockGetAllHandlerMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetAllHandler) Execute(arg0 []domain.User) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetAllHandlerMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetAllHandler)(nil).Execute), arg0)
}
